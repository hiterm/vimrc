[[plugins]]
repo = 'neovim/nvim-lspconfig'

[[plugins]]
repo = 'Shougo/deoplete-lsp'
hook_add = '''
lua << EOF
require'nvim_lsp'.rust_analyzer.setup{}
EOF

" The prefix key.
nnoremap [lsp] <Nop>
nmap     <Space>l      [lsp]

nnoremap [lsp]l :call LanguageClient_contextMenu()<CR>
nnoremap [lsp]d <cmd>lua vim.lsp.buf.definition()<CR>
nnoremap [lsp]h <cmd>lua vim.lsp.buf.hover()<CR>
nnoremap [lsp]r <cmd>lua vim.lsp.buf.rename()<CR>
nnoremap [lsp]a <cmd>lua vim.lsp.buf.code_action()<CR>
nnoremap [lsp]f <cmd>lua vim.lsp.buf.formatting()<CR>
nnoremap [lsp]T <cmd>lua require'lsp_extensions'.inlay_hints()<CR>
nnoremap [lsp]t <cmd>lua require'lsp_extensions'.inlay_hints{ only_current_line = true }<CR>

highlight link LspDiagnosticsError ErrorMsg
highlight link LspDiagnosticsVirtualTextError ErrorMsg
highlight link LspDiagnosticsDefaultError ErrorMsg
highlight link LspDiagnosticsWarning Comment
highlight link LspDiagnosticsVirtualTextWarning Comment
highlight link LspDiagnosticsDefaultWarning Comment
highlight link LspDiagnosticsInformation Comment
highlight link LspDiagnosticsVirtualTextInformation Comment
highlight link LspDiagnosticsDefaultInformation Comment
highlight link LspDiagnosticsHint Comment
highlight link LspDiagnosticsVirtualTextHint Comment
highlight link LspDiagnosticsDefaultHint Comment

lua << EOF
vim.lsp.handlers["textDocument/rename"] = function(_err, _method, result)
    if not result then return end
    if result.documentChanges then
        local merged_changes = {}
        local versions = {}
        for _, change in ipairs(result.documentChanges) do
            if change.kind then
                error("not support")
            else
                local edits = merged_changes[change.textDocument.uri] or {}
                versions[change.textDocument.uri] = change.textDocument.version
                for _, edit in ipairs(change.edits) do
                    table.insert(edits, edit)
                end
                merged_changes[change.textDocument.uri] = edits
            end
        end
        local new_changes = {}
        for uri, edits in pairs(merged_changes) do
            table.insert(new_changes, {
                edits = edits,
                textDocument = {
                    uri = uri,
                    version = versions[uri],
                }})
        end
        result.documentChanges = new_changes
    end

    vim.lsp.util.apply_workspace_edit(result)
end
EOF
'''

[[plugins]]
repo = 'RishabhRD/popfix'

[[plugins]]
repo = 'RishabhRD/nvim-lsputils'
hook_add = '''
lua <<EOF
vim.lsp.handlers['textDocument/codeAction'] = require'lsputil.codeAction'.code_action_handler
vim.lsp.handlers['textDocument/references'] = require'lsputil.locations'.references_handler
vim.lsp.handlers['textDocument/definition'] = require'lsputil.locations'.definition_handler
vim.lsp.handlers['textDocument/declaration'] = require'lsputil.locations'.declaration_handler
vim.lsp.handlers['textDocument/typeDefinition'] = require'lsputil.locations'.typeDefinition_handler
vim.lsp.handlers['textDocument/implementation'] = require'lsputil.locations'.implementation_handler
vim.lsp.handlers['textDocument/documentSymbol'] = require'lsputil.symbols'.document_handler
vim.lsp.handlers['workspace/symbol'] = require'lsputil.symbols'.workspace_handler
EOF
'''

[[plugins]]
repo = 'nvim-lua/lsp_extensions.nvim'
