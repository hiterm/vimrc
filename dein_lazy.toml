# defx
[[plugins]]
repo = 'Shougo/defx.nvim'
on_cmd = 'Defx'
hook_add = 'source ~/.vim/defx.rc.vim'
hook_post_source = '''
call defx#custom#column('icon', {
      \ 'directory_icon': '▸',
      \ 'opened_icon': '▾',
      \ })
'''

[[plugins]]
repo = 'roxma/nvim-yarp'
on_source = 'defx.nvim'
if = "!has('nvim')"

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
on_source = 'defx.nvim'
if = "!has('nvim')"

# vim-precious
[[plugins]]
repo = 'osyo-manga/vim-precious'
on_event = ['InsertEnter', 'CursorMoved']
depends = 'context_filetype.vim'
hook_add = '''
" カーソル移動時の自動切り替えを無効化
let g:precious_enable_switchers = {
      \	"*" : {
      \		"setfiletype" : 0
      \	},
      \	"toml" : {
      \		"setfiletype" : 1
      \	},
      \	"vim" : {
      \		"setfiletype" : 1
      \	},
      \'markdown' : {
      \   "setfiletype" : 1
      \},
      \}
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

# tig-explorer
[[plugins]]
repo = 'iberianpig/tig-explorer.vim'
on_cmd = ['Tig', 'TigBlame']
depends = 'bclose.vim'

[[plugins]]
repo = 'rbgrouleff/bclose.vim'

# filetype plugins
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'javascript', 'typescript']

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = 'python'
hook_add = '''
" let g:jedi#auto_initialization = 0
let g:jedi#auto_vim_configuration = 0
let g:jedi#completions_enabled = 0
command! JediRename call jedi#rename()
'''

[[plugins]]
repo = 'rhysd/committia.vim'
on_path = 'COMMIT_EDITMSG'

[[plugins]]
repo = 'osyo-manga/vim-anzu'
on_map = '<Plug>(anzu-'
hook_add = '''
nmap n <Plug>(anzu-n-with-echo)
nmap N <Plug>(anzu-N-with-echo)
nmap * <Plug>(anzu-star-with-echo)
nmap # <Plug>(anzu-sharp-with-echo)
'''

[[plugins]]
repo = 'rhysd/git-messenger.vim'
on_cmd = 'GitMessenger'
on_map = '<Plug>(git-messenger'

[[plugins]]
repo = 'Shougo/echodoc.vim'
on_event = 'CompleteDone'
hook_source = '''
let g:echodoc#type = 'virtual'
call echodoc#enable()
'''

[[plugins]]
repo = 'kana/vim-niceblock'
on_map = '<Plug>'
hook_add = '''
xmap I  <Plug>(niceblock-I)
xmap A  <Plug>(niceblock-A)
'''

[[plugins]]
repo = 'kannokanno/previm'
on_cmd = 'PrevimOpen'
depends = 'open-browser.vim'

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'haya14busa/vim-edgemotion'
on_map = {n = '<Plug>'}
hook_add = '''
map <C-j> <Plug>(edgemotion-j)
map <C-k> <Plug>(edgemotion-k)
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = ['<Plug>(EasyAlign)', '<Plug>(LiveEasyAlign)']
on_cmd = ['EasyAlign', 'LiveEasyAlign']
hook_add = '''
" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

let g:easy_align_delimiters = {
      \ '>': { 'pattern': '>>\|=>\|>' },
      \ '/': {
      \     'pattern':         '//\+\|/\*\|\*/',
      \     'delimiter_align': 'l',
      \     'ignore_groups':   ['!Comment'] },
      \ ']': {
      \     'pattern':       '[[\]]',
      \     'left_margin':   0,
      \     'right_margin':  0,
      \     'stick_to_left': 0
      \   },
      \ ')': {
      \     'pattern':       '[()]',
      \     'left_margin':   0,
      \     'right_margin':  0,
      \     'stick_to_left': 0
      \   },
      \ 'd': {
      \     'pattern':      ' \(\S\+\s*[;=]\)\@=',
      \     'left_margin':  0,
      \     'right_margin': 0
      \   }
      \ }
'''
