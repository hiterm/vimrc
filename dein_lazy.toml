# denite
[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
if = "(has('nvim') || v:version >= 800) && has('python3')"
hook_add = 'source ~/.vim/denite.rc.vim'
hook_post_source = '''
call denite#custom#var('file/rec', 'command',
    \ ['rg', '--files', '--glob', '!.git'])
call denite#custom#option('default', {
      \ 'prompt': '>',
      \ 'split': 'floating',
      \ })

" Ripgrep command on grep source
call denite#custom#var('grep', 'command', ['rg'])
call denite#custom#var('grep', 'default_opts',
    \ ['-i', '--vimgrep', '--no-heading'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = 'denite.nvim'

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_source = 'denite.nvim'

# defx
[[plugins]]
repo = 'Shougo/defx.nvim'
on_cmd = 'Defx'
hook_add = 'source ~/.vim/defx.rc.vim'
hook_post_source = '''
call defx#custom#column('icon', {
      \ 'directory_icon': '▸',
      \ 'opened_icon': '▾',
      \ })
'''

[[plugins]]
repo = 'roxma/nvim-yarp'
on_source = 'defx.nvim'
if = "!has('nvim')"

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
on_source = 'defx.nvim'
if = "!has('nvim')"


[[plugins]]
repo = 'cohama/lexima.vim'
on_event = 'InsertEnter'
hook_post_source = 'source ~/.vim/lexima.rc.vim'

# filetype pluins

[[plugins]]
repo = 'lervag/vimtex'
on_ft = 'tex'

[[plugins]]
repo = 'alvan/vim-closetag'
on_ft = 'html'

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = 'python'
hook_add = '''
" let g:jedi#auto_initialization = 0
let g:jedi#auto_vim_configuration = 0
let g:jedi#completions_enabled = 0
command! JediRename call jedi#rename()
'''

# filetype pluins ここまで

[[plugins]]
repo = 'Shougo/neosnippet'
depends = 'neosnippet-snippets'
on_event = 'InsertEnter'
on_ft = 'snippet'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'rhysd/committia.vim'
on_path = 'COMMIT_EDITMSG'

[[plugins]]
repo = 'osyo-manga/vim-anzu'
on_map = '<Plug>'
hook_add = '''
nmap n <Plug>(anzu-n-with-echo)
nmap N <Plug>(anzu-N-with-echo)
nmap * <Plug>(anzu-star-with-echo)
nmap # <Plug>(anzu-sharp-with-echo)
" clear status
nmap <Esc><Esc> <Plug>(anzu-clear-search-status)
'''

[[plugins]]
repo = 'rhysd/git-messenger.vim'
on_cmd = 'GitMessenger'
on_map = '<Plug>(git-messenger'

[[plugins]]
repo = 'Shougo/echodoc.vim'
on_event = 'CompleteDone'
hook_source = '''
let g:echodoc#type = 'virtual'
call echodoc#enable()
'''

[[plugins]]
repo = 'kana/vim-niceblock'
on_map = '<Plug>'
hook_add = '''
xmap I  <Plug>(niceblock-I)
xmap A  <Plug>(niceblock-A)
'''

[[plugins]]
repo = 'kannokanno/previm'
on_cmd = 'PrevimOpen'
depends = 'open-browser.vim'

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'rhysd/accelerated-jk'
on_map = {n = '<Plug>'}
hook_add = '''
nmap <silent>j <Plug>(accelerated_jk_j)
nmap <silent>k <Plug>(accelerated_jk_k)
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = ['<Plug>(EasyAlign)', '<Plug>(LiveEasyAlign)']
on_cmd = ['EasyAlign', 'LiveEasyAlign']
hook_add = '''
" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

let g:easy_align_delimiters = {
      \ '>': { 'pattern': '>>\|=>\|>' },
      \ '/': {
      \     'pattern':         '//\+\|/\*\|\*/',
      \     'delimiter_align': 'l',
      \     'ignore_groups':   ['!Comment'] },
      \ ']': {
      \     'pattern':       '[[\]]',
      \     'left_margin':   0,
      \     'right_margin':  0,
      \     'stick_to_left': 0
      \   },
      \ ')': {
      \     'pattern':       '[()]',
      \     'left_margin':   0,
      \     'right_margin':  0,
      \     'stick_to_left': 0
      \   },
      \ 'd': {
      \     'pattern':      ' \(\S\+\s*[;=]\)\@=',
      \     'left_margin':  0,
      \     'right_margin': 0
      \   }
      \ }
'''

[[plugins]]
repo = 'terryma/vim-expand-region'
on_map = ['<Plug>(expand_region_expand)', '<Plug>(expand_region_shrink)']
hook_add = """
let g:expand_region_text_objects = {
      \ 'iw'  :0,
      \ 'iW'  :0,
      \ 'i"'  :0,
      \ 'i''' :0,
      \ 'i]'  :1,
      \ 'ib'  :1,
      \ 'iB'  :1,
      \ 'il'  :0,
      \ 'ip'  :0,
      \ 'ie'  :0,
      \ }
"""

[[plugins]]
repo = 'osyo-manga/vim-precious'
on_event = ['InsertEnter', 'CursorMoved']
depends = 'context_filetype.vim'
hook_add = '''
" カーソル移動時の自動切り替えを無効化
let g:precious_enable_switchers = {
      \	"*" : {
      \		"setfiletype" : 0
      \	},
      \	"toml" : {
      \		"setfiletype" : 1
      \	},
      \'markdown' : {
      \   "setfiletype" : 1
      \},
      \}
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'iberianpig/tig-explorer.vim'
on_cmd = ['Tig', 'TigBlame']
depends = 'bclose.vim'

[[plugins]]
repo = 'rbgrouleff/bclose.vim'

# terminal
[[plugins]]
repo = 'kassio/neoterm'
on_cmd = ['T', 'Ttoggle']
hook_add = '''
let g:neoterm_default_mod = 'vertical belowright'
tnoremap <C-]> <C-\><C-n>
nnoremap <C-g> :Ttoggle<CR><C-w>wi
tnoremap <C-g> <C-\><C-n>:Ttoggle<CR>
" Move window by name
function! WinByBufname(bufname)
  let bufmap = map(range(1, winnr('$')), '[bufname(winbufnr(v:val)), v:val]')
  let thewindow = filter(bufmap, 'v:val[0] =~ a:bufname')[0][1]
  execute thewindow 'wincmd w'
endfunction
" Run and open neoterm window
function! NeotermRunAndOpen(cmd)
  let l:current_winid = win_getid()
  execute 'T ' . a:cmd
  Topen
  call WinByBufname('#neoterm')
  " 自動スクロールするためにファイル末尾へ移動
  normal G
  call win_gotoid(l:current_winid)
endfunction
" use like quickrun
augroup MyNeoterm
  autocmd!
  autocmd FileType ruby nnoremap <Leader>r :call NeotermRunAndOpen('ruby %')<CR>
  autocmd FileType python nnoremap <Leader>r :call NeotermRunAndOpen('python %')<CR>
  autocmd FileType rust nnoremap <Leader>r :call NeotermRunAndOpen('cargo run')<CR>
augroup END
'''

# fzf
[[plugins]]
repo = "junegunn/fzf"
on_cmd = 'FZF'
merged = 0

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
on_cmd = ['Files', 'GFiles', 'GFiles?', 'Buffers', 'Colors', 'Ag', 'Rg', 'Lines', 'BLines', 'Tags', 'BTags', 'Marks', 'Windows', 'Locate', 'History', 'History:', 'History/', 'Snippets', 'Commits', 'BCommits', 'Commands', 'Maps', 'Helptags', 'Filetypes']
merged = 0

# colorscheme
[[plugins]]
repo = 'arcticicestudio/nord-vim'
