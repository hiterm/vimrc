[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = '''
let g:dein#types#git#clone_depth=1
'''

[[plugins]]
repo = 'haya14busa/dein-command.vim'

# denite
[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'chemzqm/unite-location'

[[plugins]]
repo = "kmnk/denite-dirmark"

# neosnippet
[[plugins]]
repo = 'Shougo/neosnippet-snippets'

# appearance
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
let g:indent_guides_enable_on_vim_startup = 1
augroup MyIndentGuides
  autocmd!
  autocmd FileType defx IndentGuidesDisable
  autocmd FileType neoterm IndentGuidesDisable
augroup END
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = 'source ~/.vim/lightline.rc.vim'

[[plugins]]
repo = 'ntpeters/vim-better-whitespace'
hook_add = '''
let g:better_whitespace_enabled=1
let g:better_whitespace_filetypes_blacklist = ['defx', 'markdown']
let g:better_whitespace_operator=''
augroup MyIndentGuides
  autocmd!
  autocmd FileType help DisableWhitespace
augroup END
'''

[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = 'let g:rainbow_active = 1'

# edit
[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = "sbdchd/vim-shebang"
hook_add = '''
let g:shebang#shebangs = {
      \ 'sh': '#!/bin/bash',
      \ }
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
let g:ale_lint_on_text_changed = 0
let g:ale_linters = {'ruby': ['ruby', 'rubocop']}

if !exists('g:ale_fixers')
  let g:ale_fixers = {}
endif
let s:ale_fixer_js = [
      \ 'eslint',
      \ 'prettier'
      \]
let g:ale_fixers.ruby = ['rubocop']
let g:ale_fixers['typescript'] = s:ale_fixer_js
let g:ale_fixers['javascript'] = s:ale_fixer_js

let g:ale_disable_lsp = 1
if !has('gui_macvim')
  let g:ale_sign_error = '❌'
  let g:ale_sign_warning = '⚠'
  let g:ale_statusline_format = ['❌ %d', '⚠ %d', '']
else
  let g:ale_statusline_format = ['%d error(s)', '%d warning(s)', '']
endif
'''

[[plugins]]
repo = 'kkoomen/vim-doge'

[[plugins]]
repo = 'justinmk/vim-sneak'
hook_add = '''
let g:sneak#label = 1
'''

# git
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
let g:gitgutter_map_keys = 0
'''

# Japanese
[[plugins]]
repo = 'haya14busa/vim-migemo'

[[plugins]]
repo = 'deton/jasegment.vim'

# filetype
[[plugins]]
repo = 'sheerun/vim-polyglot'
hook_add = '''
let g:polyglot_disabled = ['tex', 'typescript', 'tsx', 'typescript.tsx']
'''

[[plugins]]
repo = 'HerringtonDarkholme/yats.vim'

[[plugins]]
repo = 'lervag/vimtex'

# terminal
[[plugins]]
repo = 'kassio/neoterm'
on_cmd = ['T', 'Ttoggle']
hook_add = '''
let g:neoterm_default_mod = 'vertical belowright'
tnoremap <C-]> <C-\><C-n>
nnoremap <C-g> :Ttoggle<CR><C-w>wi
tnoremap <C-g> <C-\><C-n>:Ttoggle<CR>
" Move window by name
function! WinByBufname(bufname)
  let bufmap = map(range(1, winnr('$')), '[bufname(winbufnr(v:val)), v:val]')
  let thewindow = filter(bufmap, 'v:val[0] =~ a:bufname')[0][1]
  execute thewindow 'wincmd w'
endfunction
" Run and open neoterm window
function! NeotermRunAndOpen(cmd)
  let l:current_winid = win_getid()
  execute 'T ' . a:cmd
  Topen
  call WinByBufname('#neoterm')
  " 自動スクロールするためにファイル末尾へ移動
  normal G
  call win_gotoid(l:current_winid)
endfunction
" use like quickrun
augroup MyNeoterm
  autocmd!
  autocmd FileType ruby nnoremap <Leader>r :call NeotermRunAndOpen('ruby %')<CR>
  autocmd FileType python nnoremap <Leader>r :call NeotermRunAndOpen('python %')<CR>
  autocmd FileType rust nnoremap <Leader>r :call NeotermRunAndOpen('cargo run')<CR>
augroup END
'''
