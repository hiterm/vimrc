[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = '''
let g:dein#types#git#clone_depth=1
'''

[[plugins]]
repo = 'haya14busa/dein-command.vim'

# denite and unite
[[plugins]]
repo = 'Shougo/denite.nvim'
if = "(has('nvim') || v:version >= 800) && has('python3')"
hook_post_source = '''
call denite#custom#var('file/rec', 'command',
    \ ['rg', '--files', '--glob', '!.git'])
'''

[[plugins]]
repo = 'Shougo/unite.vim'
depends = 'unite-outline'
hook_add = '''
if !((has('nvim') || v:version >= 800) && has('python3'))
  source ~/.vim/unite.rc.vim
endif
'''
if = "!((has('nvim') || v:version >= 800) && has('python3'))"

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'chemzqm/unite-location'

[[plugins]]
repo = "kmnk/denite-dirmark"

# defx
[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
  " Define mappings
  nnoremap <silent><buffer><expr> <CR>
        \ defx#do_action('open')
  nnoremap <silent><buffer><expr> c
        \ defx#do_action('copy')
  nnoremap <silent><buffer><expr> m
        \ defx#do_action('move')
  nnoremap <silent><buffer><expr> p
        \ defx#do_action('paste')
  nnoremap <silent><buffer><expr> l
        \ defx#do_action('open')
  nnoremap <silent><buffer><expr> E
        \ defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> P
        \ defx#do_action('open', 'pedit')
  nnoremap <silent><buffer><expr> o
        \ defx#do_action('open_or_close_tree')
  nnoremap <silent><buffer><expr> K
        \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
        \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M
        \ defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> C
        \ defx#do_action('toggle_columns',
        \                'mark:indent:icon:filename:type:size:time')
  nnoremap <silent><buffer><expr> S
        \ defx#do_action('toggle_sort', 'time')
  nnoremap <silent><buffer><expr> d
        \ defx#do_action('remove')
  nnoremap <silent><buffer><expr> r
        \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> !
        \ defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> x
        \ defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy
        \ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> .
        \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> ;
        \ defx#do_action('repeat')
  nnoremap <silent><buffer><expr> h
        \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
        \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q
        \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <C-e>
        \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
        \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *
        \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j
        \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
        \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
        \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
        \ defx#do_action('print')
  nnoremap <silent><buffer><expr> cd
        \ defx#do_action('change_vim_cwd')
endfunction

" mapping
nnoremap <silent> <C-e> :Defx<CR>
'''
hook_post_source = '''
call defx#custom#column('icon', {
    \ 'directory_icon': '▸',
    \ 'opened_icon': '▾',
    \ })
'''

[[plugins]]
repo = 'roxma/nvim-yarp'
if = "!has('nvim')"

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
if = "!has('nvim')"

# fzf
[[plugins]]
repo = "junegunn/fzf"
merged = 0

[[plugins]]
repo = 'junegunn/fzf.vim'
merged = 0

# appearance
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = 'let g:indent_guides_enable_on_vim_startup = 1'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = 'source ~/.vim/lightline.rc.vim'

[[plugins]]
repo = 'ntpeters/vim-better-whitespace'
hook_add = '''
let g:better_whitespace_enabled=1
let g:better_whitespace_filetypes_blacklist = ['defx', 'markdown']
'''


[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = 'let g:rainbow_active = 1'

# edit
[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

let g:easy_align_delimiters = {
      \ '>': { 'pattern': '>>\|=>\|>' },
      \ '/': {
      \     'pattern':         '//\+\|/\*\|\*/',
      \     'delimiter_align': 'l',
      \     'ignore_groups':   ['!Comment'] },
      \ ']': {
      \     'pattern':       '[[\]]',
      \     'left_margin':   0,
      \     'right_margin':  0,
      \     'stick_to_left': 0
      \   },
      \ ')': {
      \     'pattern':       '[()]',
      \     'left_margin':   0,
      \     'right_margin':  0,
      \     'stick_to_left': 0
      \   },
      \ 'd': {
      \     'pattern':      ' \(\S\+\s*[;=]\)\@=',
      \     'left_margin':  0,
      \     'right_margin': 0
      \   }
      \ }
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'
depends = 'vim-precious'

[[plugins]]
repo = "sbdchd/vim-shebang"
hook_add = '''
let g:shebang#shebangs = {
      \ 'sh': '#!/bin/bash',
      \ }
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
let g:ale_lint_on_text_changed = 0
let g:ale_linters = {'ruby': ['ruby', 'rubocop']}
let g:ale_disable_lsp = 1
if !has('gui_macvim')
  let g:ale_sign_error = '⨉'
  let g:ale_sign_warning = '⚠'
  let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '']
else
  let g:ale_statusline_format = ['%d error(s)', '%d warning(s)', '']
endif
'''

# git
[[plugins]]
repo = 'airblade/vim-gitgutter'

# Japanese
[[plugins]]
repo = 'haya14busa/vim-migemo'

[[plugins]]
repo = 'deton/jasegment.vim'

# filetype
[[plugins]]
repo = 'pangloss/vim-javascript'

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = 'typescript'

[[plugins]]
repo = 'neovimhaskell/haskell-vim'
on_ft = ['haskell']

[[plugins]]
repo = 'hynek/vim-python-pep8-indent'
on_ft = 'python'

[[plugins]]
repo = 'matze/vim-lilypond'
on_ft = 'lilypond'

# others
[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'kassio/neoterm'
hook_add = '''
let g:neoterm_default_mod = 'vertical belowright'
nnoremap <C-g> :Ttoggle<CR><C-w><C-w>i
tnoremap <C-g> <C-\><C-n>:Ttoggle<CR>
'''
